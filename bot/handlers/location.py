from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from bot.states.user_states import UserStates
from bot.keyboards.inline import get_location_keyboard, get_location_options_keyboard, get_attachment_guide_keyboard
from bot.handlers.photo import process_location
from bot.services.openai_service import OpenAIService
import random

router = Router()


@router.message(F.text == "/start")
async def cmd_start(message: Message, state: FSMContext):
    """Handle /start command"""
    await state.set_state(UserStates.waiting_for_location)
    await message.answer(
        "Welcome! I can help you find historical photos of places and create videos from them.\n\n"
        "You can:\n"
        "‚Ä¢ Tap location button ‚Üí Choose **'Send Selected Location'**\n"
        "‚Ä¢ Use üìé attachment menu for more control\n"
        "‚Ä¢ Or type an address (e.g., 'Times Square, New York')\n\n"
        "‚ö†Ô∏è **Important**: Choose 'Send Selected Location' to pick ANY place on the map!",
        reply_markup=get_location_keyboard(),
        parse_mode="Markdown"
    )


@router.message(F.text == "üì± How to pick any location")
async def handle_location_help(message: Message):
    """Show help for picking any location on map"""
    await message.answer(
        "üìç **How to pick ANY location (not just current):**\n\n"
        "**Option 1 - Using Location Button:**\n"
        "1. Tap 'üìç Pick Location on Map' button\n"
        "2. **IMPORTANT**: Choose **'Send Selected Location'** ‚úÖ\n"
        "   (NOT 'Send My Current Location')\n"
        "3. The map opens - navigate anywhere!\n"
        "4. Tap to place pin at desired location\n"
        "5. Tap 'Send Selected Location'\n\n"
        "**Option 2 - Using Attachment Menu:**\n"
        "1. Tap üìé (paperclip) in message field\n"
        "2. Select 'Location'\n"
        "3. Choose **'Send Selected Location'**\n"
        "4. Navigate map and pick any place\n\n"
        "‚ö†Ô∏è **Common mistake**: Don't use 'Send My Current Location' - that only sends GPS position!",
        parse_mode="Markdown"
    )


@router.message(F.text == "üìé Use Attachment Menu Instead")
async def handle_attachment_menu_guide(message: Message):
    """Guide user to use attachment menu"""
    await message.answer(
        "üìé **Using Attachment Menu for Better Control:**\n\n"
        "1. Look for üìé (paperclip) next to message field\n"
        "2. Tap it and select **'Location'**\n"
        "3. You'll see 3 options:\n"
        "   ‚Ä¢ Send My Current Location (GPS only)\n"
        "   ‚Ä¢ **Send Selected Location** ‚Üê USE THIS! ‚úÖ\n"
        "   ‚Ä¢ Share Live Location\n\n"
        "4. Choose **'Send Selected Location'**\n"
        "5. Navigate the map freely\n"
        "6. Tap to drop pin anywhere\n"
        "7. Send the selected location\n\n"
        "This gives you full control over location selection! üó∫Ô∏è",
        reply_markup=get_attachment_guide_keyboard(),
        parse_mode="Markdown"
    )


@router.message(F.text == "üì± Show me how to use attachment menu")
async def handle_attachment_detailed_guide(message: Message):
    """Show detailed attachment menu guide"""
    await message.answer(
        "üìç **Step-by-Step Visual Guide:**\n\n"
        "1Ô∏è‚É£ Find the üìé icon at bottom of chat\n"
        "2Ô∏è‚É£ Tap üìé ‚Üí See menu popup\n"
        "3Ô∏è‚É£ Select 'Location' üìç\n"
        "4Ô∏è‚É£ **CRITICAL**: Select 'Send Selected Location'\n"
        "5Ô∏è‚É£ Map opens ‚Üí Zoom out to see more\n"
        "6Ô∏è‚É£ Navigate to desired area\n"
        "7Ô∏è‚É£ Tap once to place pin üìå\n"
        "8Ô∏è‚É£ Tap 'Send Selected Location' button\n\n"
        "‚ú® **–°–æ–≤–µ—Ç**: –©–∏–ø–∫–æ–º —É–≤–µ–ª–∏—á–∏–≤–∞–π—Ç–µ/—É–º–µ–Ω—å—à–∞–π—Ç–µ, –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–π—Ç–µ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è!",
        parse_mode="Markdown"
    )


@router.message(F.text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–Ω–æ–ø–∫–µ –ª–æ–∫–∞—Ü–∏–∏")
async def handle_back_to_location(message: Message, state: FSMContext):
    """Go back to location button keyboard"""
    await message.answer(
        "–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –ª–æ–∫–∞—Ü–∏–∏. –ü–æ–º–Ω–∏—Ç–µ: –≤—ã–±–∏—Ä–∞–π—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é'!",
        reply_markup=get_location_keyboard()
    )


@router.message(F.text == "üé≤ –°–ª—É—á–∞–π–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è")
async def handle_random_location(message: Message, state: FSMContext):
    """Generate random location coordinates"""
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    # –®–∏—Ä–æ—Ç–∞ –æ—Ç -90 –¥–æ 90
    lat = random.uniform(-90, 90)
    # –î–æ–ª–≥–æ—Ç–∞ –æ—Ç -180 –¥–æ 180
    lon = random.uniform(-180, 180)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞—Ü–∏—é –∫–∞–∫ venue
    await message.answer_venue(
        latitude=lat,
        longitude=lon,
        title="üé≤ –°–ª—É—á–∞–π–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è",
        address=f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat:.6f}, {lon:.6f}"
    )
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, —á—Ç–æ –¥–µ–ª–∞—Ç—å —Å —ç—Ç–æ–π –ª–æ–∫–∞—Ü–∏–µ–π
    await message.answer(
        "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å–ª—É—á–∞–π–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è! –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å –Ω–µ–π —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=get_location_options_keyboard(lat, lon)
    )


@router.message(F.location)
async def handle_location(message: Message, state: FSMContext):
    """Handle shared location from any state"""
    lat = message.location.latitude
    lon = message.location.longitude
    
    # Send the location as a venue to show on Telegram's map
    await message.answer_venue(
        latitude=lat,
        longitude=lon,
        title="üìç –í—ã–±—Ä–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ",
        address=f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat:.6f}, {lon:.6f}"
    )
    
    # Ask user what they want to do with this location
    await message.answer(
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å —ç—Ç–∏–º –º–µ—Å—Ç–æ–º?",
        reply_markup=get_location_options_keyboard(lat, lon)
    )


@router.callback_query(F.data == "new_location")
async def handle_new_location_from_photo(callback: CallbackQuery, state: FSMContext):
    """Handle when user wants to send new location from photo actions"""
    await state.set_state(UserStates.waiting_for_location)
    await callback.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ:\n\n"
        "üí° **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ**: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é' —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –õ–Æ–ë–û–ï –º–µ—Å—Ç–æ!\n"
        "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –≤–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è.",
        reply_markup=get_location_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()


@router.message(UserStates.waiting_for_location, F.text)
async def handle_address_text(message: Message, state: FSMContext):
    """Handle text message as address input"""
    if message.text.startswith("/"):
        # Ignore commands when waiting for location
        return
    
    address = message.text.strip()
    await message.answer(f"üîç –ò—â—É –º–µ—Å—Ç–æ: {address}\n\n–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ —è –Ω–∞–π–¥—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã...")
    
    # Use OpenAI to geocode the address
    coordinates = await OpenAIService.geocode_address(address)
    
    if coordinates:
        lat = coordinates["latitude"]
        lon = coordinates["longitude"]
        
        await state.update_data(latitude=lat, longitude=lon, shown_photos=[])
        await state.set_state(UserStates.selecting_photo)
        
        # Send the found location as a venue
        await message.answer_venue(
            latitude=lat,
            longitude=lon,
            title="üìç –ú–µ—Å—Ç–æ –Ω–∞–π–¥–µ–Ω–æ",
            address=address
        )
        
        await message.answer("–ò—â—É –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏...")
        await process_location(message, state, lat, lon)
    else:
        await message.answer(
            "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —ç—Ç–æ–≥–æ –∞–¥—Ä–µ—Å–∞.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            "‚Ä¢ –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å\n"
            "‚Ä¢ –£–∫–∞–∑–∞—Ç—å –≥–æ—Ä–æ–¥ –∏ —Å—Ç—Ä–∞–Ω—É\n"
            "‚Ä¢ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é' –∏–∑ –º–µ–Ω—é –ª–æ–∫–∞—Ü–∏–∏:",
            reply_markup=get_location_keyboard()
        )


@router.callback_query(F.data.startswith("use_location:"))
async def handle_use_location(callback: CallbackQuery, state: FSMContext):
    """Handle when user chooses to use the shared location"""
    # Extract coordinates from callback data
    parts = callback.data.split(":")
    lat = float(parts[1])
    lon = float(parts[2])
    
    # Update state with location data
    await state.update_data(latitude=lat, longitude=lon, shown_photos=[])
    await state.set_state(UserStates.selecting_photo)
    
    # Send venue to show the location being used
    await callback.message.answer_venue(
        latitude=lat,
        longitude=lon,
        title="üìç –ò—Å–ø–æ–ª—å–∑—É—é —ç—Ç–æ –º–µ—Å—Ç–æ",
        address=f"–ò—â—É –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏..."
    )
    
    # Delete the options message
    await callback.message.delete()
    
    # Process the location
    await process_location(callback.message, state, lat, lon)
    await callback.answer()


@router.callback_query(F.data == "request_new_location")
async def handle_request_new_location(callback: CallbackQuery, state: FSMContext):
    """Handle when user wants to change location"""
    await state.set_state(UserStates.waiting_for_location)
    await callback.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ:\n\n"
        "üí° **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ**: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é' —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –õ–Æ–ë–û–ï –º–µ—Å—Ç–æ!\n"
        "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –≤–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è.",
        reply_markup=get_location_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()