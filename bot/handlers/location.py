from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
import json
from bot.states.user_states import UserStates
from bot.keyboards.inline import get_location_keyboard, get_location_options_keyboard, get_simple_location_keyboard
from bot.handlers.photo import process_location
from bot.services.openai_service import OpenAIService
from bot.utils.progress import ProgressAnimator
import random

router = Router()


@router.message(F.text == "/start")
async def cmd_start(message: Message, state: FSMContext):
    """Handle /start command"""
    await state.set_state(UserStates.waiting_for_location)
    await message.answer(
        "üèõÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ª—é–±—ã—Ö –º–µ—Å—Ç –∏ —Å–æ–∑–¥–∞—Ç—å –∏–∑ –Ω–∏—Ö –≤–∏–¥–µ–æ.\n\n"
        "üó∫Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –Ω–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞—Ä—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å - –∏ —è –Ω–∞–π–¥—É —Å—Ç–∞—Ä–∏–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —ç—Ç–æ–≥–æ –º–µ—Å—Ç–∞!",
        reply_markup=get_location_keyboard()
    )


@router.message(F.text == "üìù –í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å")
async def handle_address_input(message: Message, state: FSMContext):
    """Handle address input request"""
    await state.set_state(UserStates.waiting_for_location)
    await message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –º–µ—Å—Ç–∞, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏:\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "‚Ä¢ –ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å, –ú–æ—Å–∫–≤–∞\n"
        "‚Ä¢ Times Square, New York\n"
        "‚Ä¢ –≠–π—Ñ–µ–ª–µ–≤–∞ –±–∞—à–Ω—è, –ü–∞—Ä–∏–∂"
    )


@router.message(F.text == "üé≤ –°–ª—É—á–∞–π–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è")
async def handle_random_location(message: Message, state: FSMContext):
    """Generate random location coordinates"""
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    # –®–∏—Ä–æ—Ç–∞ –æ—Ç -90 –¥–æ 90
    lat = random.uniform(-90, 90)
    # –î–æ–ª–≥–æ—Ç–∞ –æ—Ç -180 –¥–æ 180
    lon = random.uniform(-180, 180)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞—Ü–∏—é –∫–∞–∫ venue
    await message.answer_venue(
        latitude=lat,
        longitude=lon,
        title="üé≤ –°–ª—É—á–∞–π–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è",
        address=f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat:.6f}, {lon:.6f}"
    )
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, —á—Ç–æ –¥–µ–ª–∞—Ç—å —Å —ç—Ç–æ–π –ª–æ–∫–∞—Ü–∏–µ–π
    await message.answer(
        "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å–ª—É—á–∞–π–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è! –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å –Ω–µ–π —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=get_location_options_keyboard(lat, lon)
    )


@router.message(F.location)
async def handle_location(message: Message, state: FSMContext):
    """Handle shared location from any state"""
    lat = message.location.latitude
    lon = message.location.longitude
    
    # Send the location as a venue to show on Telegram's map
    await message.answer_venue(
        latitude=lat,
        longitude=lon,
        title="üìç –í—ã–±—Ä–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ",
        address=f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat:.6f}, {lon:.6f}"
    )
    
    # Ask user what they want to do with this location
    await message.answer(
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å —ç—Ç–∏–º –º–µ—Å—Ç–æ–º?",
        reply_markup=get_location_options_keyboard(lat, lon)
    )


@router.message(F.web_app_data)
async def handle_web_app_data(message: Message, state: FSMContext):
    """Handle data from Web App (map location picker)"""
    try:
        # Parse the JSON data from Web App
        data = json.loads(message.web_app_data.data)
        lat = data["latitude"]
        lon = data["longitude"]
        
        # Update state with location data
        await state.update_data(latitude=lat, longitude=lon, shown_photos=[])
        await state.set_state(UserStates.selecting_photo)
        
        # Send the location as a venue to show on Telegram's map
        await message.answer_venue(
            latitude=lat,
            longitude=lon,
            title="üó∫Ô∏è –í—ã–±—Ä–∞–Ω–Ω–æ–µ –Ω–∞ –∫–∞—Ä—Ç–µ –º–µ—Å—Ç–æ",
            address=f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat:.6f}, {lon:.6f}"
        )
        
        # Start searching for photos with animated progress
        animator = ProgressAnimator()
        progress_msg = await animator.start_animated_progress(
            message, 
            "üîç –ò—â—É –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"
        )
        
        await process_location(message, state, lat, lon)
        
        animator.stop()
        await progress_msg.delete()
        
    except (json.JSONDecodeError, KeyError):
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –º–µ—Å—Ç–æ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=get_simple_location_keyboard()
        )


@router.callback_query(F.data == "new_location")
async def handle_new_location_from_photo(callback: CallbackQuery, state: FSMContext):
    """Handle when user wants to send new location from photo actions"""
    await state.set_state(UserStates.waiting_for_location)
    await callback.message.answer(
        "üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ:",
        reply_markup=get_simple_location_keyboard()
    )
    await callback.answer()


@router.message(UserStates.waiting_for_location, F.text)
async def handle_address_text(message: Message, state: FSMContext):
    """Handle text message as address input"""
    if message.text.startswith("/"):
        # Ignore commands when waiting for location
        return
    
    address = message.text.strip()
    
    # Start animated progress
    animator = ProgressAnimator()
    progress_msg = await animator.start_animated_progress(
        message,
        f"üîç –ò—â—É –º–µ—Å—Ç–æ: {address}\n\n–û–ø—Ä–µ–¥–µ–ª—è—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã"
    )
    
    # Use OpenAI to geocode the address
    coordinates = await OpenAIService.geocode_address(address)
    
    if coordinates:
        lat = coordinates["latitude"]
        lon = coordinates["longitude"]
        
        await state.update_data(latitude=lat, longitude=lon, shown_photos=[])
        await state.set_state(UserStates.selecting_photo)
        
        # Send the found location as a venue
        await message.answer_venue(
            latitude=lat,
            longitude=lon,
            title="üìç –ú–µ—Å—Ç–æ –Ω–∞–π–¥–µ–Ω–æ",
            address=address
        )
        
        # Continue with photo search animation
        animator.stop()
        await progress_msg.delete()
        
        # Start new animation for photo search
        photo_animator = ProgressAnimator()
        photo_progress_msg = await photo_animator.start_animated_progress(
            message,
            "üì∏ –ò—â—É –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"
        )
        
        await process_location(message, state, lat, lon)
        
        photo_animator.stop()
        await photo_progress_msg.delete()
    else:
        animator.stop()
        await progress_msg.delete()
        
        await message.answer(
            "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —ç—Ç–æ–≥–æ –∞–¥—Ä–µ—Å–∞.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            "‚Ä¢ –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å\n"
            "‚Ä¢ –£–∫–∞–∑–∞—Ç—å –≥–æ—Ä–æ–¥ –∏ —Å—Ç—Ä–∞–Ω—É\n"
            "‚Ä¢ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∫–∞—Ä—Ç—É:",
            reply_markup=get_simple_location_keyboard()
        )


@router.callback_query(F.data.startswith("use_location:"))
async def handle_use_location(callback: CallbackQuery, state: FSMContext):
    """Handle when user chooses to use the shared location"""
    # Extract coordinates from callback data
    parts = callback.data.split(":")
    lat = float(parts[1])
    lon = float(parts[2])
    
    # Update state with location data
    await state.update_data(latitude=lat, longitude=lon, shown_photos=[])
    await state.set_state(UserStates.selecting_photo)
    
    # Send venue to show the location being used
    await callback.message.answer_venue(
        latitude=lat,
        longitude=lon,
        title="üìç –ò—Å–ø–æ–ª—å–∑—É—é —ç—Ç–æ –º–µ—Å—Ç–æ",
        address=f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat:.6f}, {lon:.6f}"
    )
    
    # Start animated progress for photo search
    animator = ProgressAnimator()
    progress_msg = await animator.start_animated_progress(
        callback.message,
        "üîç –ò—â—É –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"
    )
    
    # Delete the options message
    await callback.message.delete()
    
    # Process the location
    await process_location(callback.message, state, lat, lon)
    
    # Stop animation
    animator.stop()
    await progress_msg.delete()
    
    await callback.answer()


@router.callback_query(F.data == "request_new_location")
async def handle_request_new_location(callback: CallbackQuery, state: FSMContext):
    """Handle when user wants to change location"""
    await state.set_state(UserStates.waiting_for_location)
    await callback.message.answer(
        "üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ:",
        reply_markup=get_simple_location_keyboard()
    )
    await callback.answer()